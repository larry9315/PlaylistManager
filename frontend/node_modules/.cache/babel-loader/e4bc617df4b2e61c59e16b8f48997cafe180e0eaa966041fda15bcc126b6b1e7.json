{"ast":null,"code":"var _jsxFileName = \"/Users/larrypark/Projects/PlaylistManager/PlaylistManager/frontend/src/components/Playlists.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\"; // Import useParams for dynamic routing\nimport \"./../styles/Playlists.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Playlists = () => {\n  _s();\n  const {\n    service\n  } = useParams(); // Get the service parameter from the URL\n  const [playlists, setPlaylists] = useState([]); // List of playlists\n  const [expandedPlaylist, setExpandedPlaylist] = useState(null); // Tracks which playlist is expanded\n  const [songs, setSongs] = useState({}); // Store songs for each playlist\n  const [portStatus, setPortStatus] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch playlists on component mount\n  useEffect(() => {\n    fetch(`https://localhost:8080/playlists/${service}`).then(response => response.json()).then(data => {\n      if (data.playlists) {\n        setPlaylists(data.playlists);\n      }\n    }).catch(err => console.error(\"Error fetching playlists:\", err));\n  }, [service]);\n\n  // Handle expanding/collapsing a playlist\n  const handleExpand = playlistId => {\n    // Toggle expanded state\n    setExpandedPlaylist(prev => prev === playlistId ? null : playlistId);\n\n    // Fetch songs if not already loaded\n    if (!songs[playlistId]) {\n      fetch(`https://localhost:8080/playlists/${service}/${playlistId}/songs`).then(response => response.json()).then(data => {\n        if (data.songs) {\n          setSongs(prevSongs => ({\n            ...prevSongs,\n            [playlistId]: data.songs\n          }));\n        }\n      }).catch(err => console.error(\"Error fetching songs:\", err));\n    }\n  };\n  const handlePortPlaylist = spotifyPlaylistId => {\n    fetch(\"https://localhost:8080/port/spotify-to-youtube\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        spotifyPlaylistId,\n        youtubeAccessToken: \"<your-youtube-access-token>\"\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        setPortStatus(\"Playlist ported successfully!\");\n      } else {\n        setPortStatus(\"Error porting playlist: \" + data.error);\n      }\n    }).catch(err => {\n      console.error(\"Error porting playlist:\", err);\n      setPortStatus(\"Error porting playlist.\");\n    });\n  };\n\n  // Handle back button click\n  const handleBackToHome = () => {\n    navigate(\"/\"); // Redirect to the landing page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"playlist-header\",\n      children: [service.charAt(0).toUpperCase() + service.slice(1), \" Playlists\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"playlist-list\",\n      children: playlists.map((playlist, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"playlist-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-title\",\n          onClick: () => handleExpand(playlist.id) // Expand on click\n          ,\n          children: [playlist.name, service === \"spotify\" && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"port-button\",\n            onClick: () => handlePortPlaylist(playlist.id),\n            children: \"Port to YouTube\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), expandedPlaylist === playlist.id && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"songs-list\",\n          children: songs[playlist.id] ? songs[playlist.id].map((song, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"song-item\",\n            children: [song.title, \" \"]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 41\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Loading songs...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBackToHome,\n      className: \"back-button\",\n      children: \"Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(Playlists, \"ycoj5AtoBXz9FsU/QKRvqH3U6HA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Playlists;\nexport default Playlists;\nvar _c;\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","jsxDEV","_jsxDEV","Playlists","_s","service","playlists","setPlaylists","expandedPlaylist","setExpandedPlaylist","songs","setSongs","portStatus","setPortStatus","navigate","fetch","then","response","json","data","catch","err","console","error","handleExpand","playlistId","prev","prevSongs","handlePortPlaylist","spotifyPlaylistId","method","headers","body","JSON","stringify","youtubeAccessToken","success","handleBackToHome","children","className","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","map","playlist","index","onClick","id","name","song","idx","title","_c","$RefreshReg$"],"sources":["/Users/larrypark/Projects/PlaylistManager/PlaylistManager/frontend/src/components/Playlists.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\"; // Import useParams for dynamic routing\nimport \"./../styles/Playlists.css\";\n\nconst Playlists = () => {\n    const { service } = useParams(); // Get the service parameter from the URL\n    const [playlists, setPlaylists] = useState([]); // List of playlists\n    const [expandedPlaylist, setExpandedPlaylist] = useState(null); // Tracks which playlist is expanded\n    const [songs, setSongs] = useState({}); // Store songs for each playlist\n    const [portStatus, setPortStatus] = useState(null);\n\n    const navigate = useNavigate();\n\n    // Fetch playlists on component mount\n    useEffect(() => {\n        fetch(`https://localhost:8080/playlists/${service}`)\n            .then((response) => response.json())\n            .then((data) => {\n                if (data.playlists) {\n                    setPlaylists(data.playlists);\n                }\n            })\n            .catch((err) => console.error(\"Error fetching playlists:\", err));\n    }, [service]);\n\n    // Handle expanding/collapsing a playlist\n    const handleExpand = (playlistId) => {\n        // Toggle expanded state\n        setExpandedPlaylist((prev) => (prev === playlistId ? null : playlistId));\n\n        // Fetch songs if not already loaded\n        if (!songs[playlistId]) {\n            fetch(`https://localhost:8080/playlists/${service}/${playlistId}/songs`)\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.songs) {\n                        setSongs((prevSongs) => ({\n                            ...prevSongs,\n                            [playlistId]: data.songs,\n                        }));\n                    }\n                })\n                .catch((err) => console.error(\"Error fetching songs:\", err));\n        }\n    };\n\n    const handlePortPlaylist = (spotifyPlaylistId) => {\n        fetch(\"https://localhost:8080/port/spotify-to-youtube\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                spotifyPlaylistId,\n                youtubeAccessToken: \"<your-youtube-access-token>\",\n            }),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                if (data.success) {\n                    setPortStatus(\"Playlist ported successfully!\");\n                } else {\n                    setPortStatus(\"Error porting playlist: \" + data.error);\n                }\n            })\n            .catch((err) => {\n                console.error(\"Error porting playlist:\", err);\n                setPortStatus(\"Error porting playlist.\");\n            });\n    };\n\n    // Handle back button click\n    const handleBackToHome = () => {\n        navigate(\"/\"); // Redirect to the landing page\n    };\n\n    return (\n        <div>\n            <h1 className=\"playlist-header\">\n                {service.charAt(0).toUpperCase() + service.slice(1)} Playlists\n            </h1>\n            <ul className=\"playlist-list\">\n                {playlists.map((playlist, index) => (\n                    <li key={index} className=\"playlist-item\">\n                        <div\n                            className=\"playlist-title\"\n                            onClick={() => handleExpand(playlist.id)} // Expand on click\n                        >\n                            {playlist.name}\n\n                            {service === \"spotify\" && (\n                                <button\n                                    className=\"port-button\"\n                                    onClick={() => handlePortPlaylist(playlist.id)}\n                                >\n                                    Port to YouTube\n                                </button>\n                            )}\n                        </div>\n                        {/* Expanded section for songs */}\n                        {expandedPlaylist === playlist.id && (\n                            <ul className=\"songs-list\">\n                                {songs[playlist.id] ? (\n                                    songs[playlist.id].map((song, idx) => (\n                                        <li key={idx} className=\"song-item\">\n                                            {song.title} {/* Display song title */}\n                                        </li>\n                                    ))\n                                ) : (\n                                    <li>Loading songs...</li>\n                                )}\n                            </ul>\n                        )}\n\n\n                    </li>\n                ))}\n            </ul>\n            <button onClick={handleBackToHome} className=\"back-button\">\n                Back to Home\n            </button>\n        </div>\n\n\n    )\n        ;\n};\n\nexport default Playlists;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAC3D,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAQ,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EACjC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMgB,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACZkB,KAAK,CAAC,oCAAoCV,OAAO,EAAE,CAAC,CAC/CW,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACZ,IAAIA,IAAI,CAACb,SAAS,EAAE;QAChBC,YAAY,CAACY,IAAI,CAACb,SAAS,CAAC;MAChC;IACJ,CAAC,CAAC,CACDc,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC,CAAC;EACxE,CAAC,EAAE,CAAChB,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMmB,YAAY,GAAIC,UAAU,IAAK;IACjC;IACAhB,mBAAmB,CAAEiB,IAAI,IAAMA,IAAI,KAAKD,UAAU,GAAG,IAAI,GAAGA,UAAW,CAAC;;IAExE;IACA,IAAI,CAACf,KAAK,CAACe,UAAU,CAAC,EAAE;MACpBV,KAAK,CAAC,oCAAoCV,OAAO,IAAIoB,UAAU,QAAQ,CAAC,CACnET,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACZ,IAAIA,IAAI,CAACT,KAAK,EAAE;UACZC,QAAQ,CAAEgB,SAAS,KAAM;YACrB,GAAGA,SAAS;YACZ,CAACF,UAAU,GAAGN,IAAI,CAACT;UACvB,CAAC,CAAC,CAAC;QACP;MACJ,CAAC,CAAC,CACDU,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;IACpE;EACJ,CAAC;EAED,MAAMO,kBAAkB,GAAIC,iBAAiB,IAAK;IAC9Cd,KAAK,CAAC,gDAAgD,EAAE;MACpDe,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBL,iBAAiB;QACjBM,kBAAkB,EAAE;MACxB,CAAC;IACL,CAAC,CAAC,CACGnB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACZ,IAAIA,IAAI,CAACiB,OAAO,EAAE;QACdvB,aAAa,CAAC,+BAA+B,CAAC;MAClD,CAAC,MAAM;QACHA,aAAa,CAAC,0BAA0B,GAAGM,IAAI,CAACI,KAAK,CAAC;MAC1D;IACJ,CAAC,CAAC,CACDH,KAAK,CAAEC,GAAG,IAAK;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC7CR,aAAa,CAAC,yBAAyB,CAAC;IAC5C,CAAC,CAAC;EACV,CAAC;;EAED;EACA,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM;IAC3BvB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACnB,CAAC;EAED,oBACIZ,OAAA;IAAAoC,QAAA,gBACIpC,OAAA;MAAIqC,SAAS,EAAC,iBAAiB;MAAAD,QAAA,GAC1BjC,OAAO,CAACmC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGpC,OAAO,CAACqC,KAAK,CAAC,CAAC,CAAC,EAAC,YACxD;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACL5C,OAAA;MAAIqC,SAAS,EAAC,eAAe;MAAAD,QAAA,EACxBhC,SAAS,CAACyC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC3B/C,OAAA;QAAgBqC,SAAS,EAAC,eAAe;QAAAD,QAAA,gBACrCpC,OAAA;UACIqC,SAAS,EAAC,gBAAgB;UAC1BW,OAAO,EAAEA,CAAA,KAAM1B,YAAY,CAACwB,QAAQ,CAACG,EAAE,CAAE,CAAC;UAAA;UAAAb,QAAA,GAEzCU,QAAQ,CAACI,IAAI,EAEb/C,OAAO,KAAK,SAAS,iBAClBH,OAAA;YACIqC,SAAS,EAAC,aAAa;YACvBW,OAAO,EAAEA,CAAA,KAAMtB,kBAAkB,CAACoB,QAAQ,CAACG,EAAE,CAAE;YAAAb,QAAA,EAClD;UAED;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACX;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,EAELtC,gBAAgB,KAAKwC,QAAQ,CAACG,EAAE,iBAC7BjD,OAAA;UAAIqC,SAAS,EAAC,YAAY;UAAAD,QAAA,EACrB5B,KAAK,CAACsC,QAAQ,CAACG,EAAE,CAAC,GACfzC,KAAK,CAACsC,QAAQ,CAACG,EAAE,CAAC,CAACJ,GAAG,CAAC,CAACM,IAAI,EAAEC,GAAG,kBAC7BpD,OAAA;YAAcqC,SAAS,EAAC,WAAW;YAAAD,QAAA,GAC9Be,IAAI,CAACE,KAAK,EAAC,GAAC;UAAA,GADRD,GAAG;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAER,CACP,CAAC,gBAEF5C,OAAA;YAAAoC,QAAA,EAAI;UAAgB;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAC3B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACP;MAAA,GA7BIG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgCV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACL5C,OAAA;MAAQgD,OAAO,EAAEb,gBAAiB;MAACE,SAAS,EAAC,aAAa;MAAAD,QAAA,EAAC;IAE3D;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAKd,CAAC;AAAC1C,EAAA,CA1HID,SAAS;EAAA,QACSJ,SAAS,EAMZC,WAAW;AAAA;AAAAwD,EAAA,GAP1BrD,SAAS;AA4Hf,eAAeA,SAAS;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}